“Unix 很简单。但需要有一定天赋的人才能理解这种简单。”
“软件在能够复用前必须先能用。”
“优秀的判断力来自经验，但经验来自于错误的判断。”
“当你想在你的代码中找到一个错误时，这很难；当你认为你的代码是不会有错误时，这就更难了。”
“如果建筑工人盖房子的方式跟程序员写程序一样，那第一只飞来的啄木鸟就将毁掉人类文明。”
“优秀的代码是它自己最好的文档。当你考虑要添加一个注释时，问问自己，‘如何能改进这段代码，以让它不需要注释？’”
“我们这个世界的一个问题是，蠢人信誓旦旦，智人满腹狐疑。”
“罗马帝国崩溃的一个主要原因是，没有 0，他们没有有效的方法表示他们的 C 程序成功的终止。”
“如果 debugging 是一种消灭 bug 的过程，那编程就一定是把 bug 放进去的过程。”
“有两种方法能写出没有错误的程序；但只有第三种好用。”
“用代码行数来测评软件开发进度，就相对于用重量来计算飞机建造进度。”
“最初的 90% 的代码用去了最初 90% 的开发时间。余下的 10% 的代码用掉另外 90% 的开发时间。”
“程序员和上帝打赌要开发出更大更好 —— 傻瓜都会用的软件。而上帝却总能创造出更大更傻的傻瓜。所以，上帝总能赢。”
“除非明确地使其沉默，错误永远不应该默默地溜走。”
“世上只有两种编程语言：一种是总是被人骂的，一种是从来没人用的。”
“解决问题大多数都很容易；找到问题出在哪里却很难。”
“在每个编写精良的大程序里面都是一个编写精良的小程序。”
“世界上有两个设计软件的方法，一种方法是设计的尽量简单，以至于明显的没有什么缺陷，另外一种方式是使他尽量的复杂，以至于其缺陷不那么明显。”
“代码胜于雄辩。”
“拙劣的程序员担心代码。好的程序员担心数据结构及它们的关系。”
“任何一个傻瓜都会写能够让机器理解的代码，只有好的程序员才能写出人类可以理解的代码。”
“作为一个程序员，郁闷的事情是，面对一个代码块，却不敢去修改。更糟糕的是，这个代码块还是自己写的。”
“软件工程的目标是控制复杂度，而不是增加复杂性。”
“计算机科学中的所有问题都可以通过另一种间接的方式来解决，但通常会产生另一个问题”
“简单是可靠性的先决条件。”
“如果我们希望计算代码行，则不应将它们视为‘产生的行’，而是看作‘花费的行’。”
“代码永远不会说谎；代码注释有时会。”
“抽象化是一种非常的不同于模糊化的东西 … 抽象的目的并不是为了模糊，而是为了创造出一种能让我们做到百分百精确的新语义。”
“除数学外，对本土语言的异常的精通会是一个计算机程序员的最宝贵的财富。”
“C 语言很容易让你犯错误；C++ 看起来好一些，但当你用它时，你会发现会死的更惨。”
“嘿，编译通过了！装包吧！”
“管理程序员就像是在放养一群猫。”
“我们应该注意到，没有一个受过伦理教育的软件工程师会同意开发出‘摧毁巴格达’的程序。然而基本的职业道德却可以要求他们开发出‘摧毁城市’的程序，巴格达只是这个程序的一个参数。”
“在一种编程语言中，即使有再多的好程序被诋毁指责，也要比被说成完美无缺好，好的多。”
“程序应该是写给其他人读的，让机器来运行它只是一个附带功能。”
“简单是稳定的前提。”
“性能的关键是精简，而不是一堆的优化用例。除非有真正显著的效果，否则一定要忍住你那些蠢蠢欲动的小微调的企图。”
“用 C 写的最后的一个好东西就是舒伯特的第九交响乐。”
“开发的越早，程序花费你的时间越长。”
“丑陋的程序和丑陋的吊桥一样：他们都容易坍塌，因为人类（尤其是工程师们）的审美定义跟人们对复杂事物的处理和理解密切相关。一种编程语言如果不能使你写出优美的代码，那它也就不能使你写出好的程序。”
“数周的编程能省掉你几个小时的计划时间。”
“当一种能够让程序员通过简单的英语来编程的编程语言诞生后，你会发现程序员们都不会说英语。”
“每个程序都是其他程序的一部分，因此很少能完全适用。”
“如果程序需要处理大量的数据，那么它处理数据的方式一定只局限于少数几种。”
“编写错误的程序要比理解正确的程序简单多了。”
“每个程序都至少有两个目的：一个是写这个程序的原因，另一个不是。”
“如果在你解释自己写的程序时，有听众点头了，那他一定是睡着了，请务必把他叫醒。”
“如果一门编程语言不能影响你对编程的整体认知，那它甚至不值得一学。”
“优化会阻碍软件的进化。”
“一旦你真正了解了编程的精髓，就请其他人来编写它。”